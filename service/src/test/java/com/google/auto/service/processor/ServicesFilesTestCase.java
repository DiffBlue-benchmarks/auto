package com.google.auto.service.processor;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ServicesFilesTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ServicesFiles */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 92 branch to line 92
   */

  @Test
  public void writeServiceFileInputNullNullOutputNullPointerException() throws Throwable {

    // Arrange
    java.util.Collection<String> services = null;
    java.io.OutputStream output = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      Class<?> c = Reflector.forName("com.google.auto.service.processor.ServicesFiles");
      Method m = c.getDeclaredMethod("writeServiceFile", Reflector.forName("java.util.Collection"),
                                     Reflector.forName("java.io.OutputStream"));
      m.setAccessible(true);
      m.invoke(null, services, output);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  /* testedClasses: ServicesFiles */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void getPathInputNotNullOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    String serviceName = "";

    // Act
    Class<?> c = Reflector.forName("com.google.auto.service.processor.ServicesFiles");
    Method m = c.getDeclaredMethod("getPath", Reflector.forName("java.lang.String"));
    m.setAccessible(true);
    String retval = (String)m.invoke(null, serviceName);

    // Assert result
    Assert.assertEquals("META-INF/services/", retval);
  }
}
