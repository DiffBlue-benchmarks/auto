package com.google.auto.service.processor;

import com.diffblue.deeptestutils.Reflector;
import com.google.auto.service.processor.AutoServiceProcessor;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Array;

public class AutoServiceProcessorTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: AutoServiceProcessor */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 273 branch to line 273
   */

  @Test
  public void visitArrayInputNullNullOutputNullPointerException() throws Throwable {

    // Arrange
    Object objectUnderTest =
        Reflector.getInstance("com.google.auto.service.processor.AutoServiceProcessor$1");
    Reflector.setField(objectUnderTest, "this$0", null);
    java.util.List values = null;
    Void v = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      Class<?> c = Reflector.forName("com.google.auto.service.processor.AutoServiceProcessor$1");
      Method m = c.getDeclaredMethod("visitArray", Reflector.forName("java.util.List"),
                                     Reflector.forName("java.lang.Void"));
      m.setAccessible(true);
      m.invoke(objectUnderTest, values, v);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }

  /* testedClasses: AutoServiceProcessor */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 218 branch to line 218
   */

  @Test
  public void checkImplementerInputNullNullOutputNullPointerException() throws Throwable {

    // Arrange
    AutoServiceProcessor objectUnderTest = ((AutoServiceProcessor)Reflector.getInstance(
        "com.google.auto.service.processor.AutoServiceProcessor"));
    Reflector.setField(objectUnderTest, "providers", null);
    Reflector.setField(objectUnderTest, "processingEnv", null);
    javax.lang.model.element.TypeElement providerImplementer = null;
    javax.lang.model.element.TypeElement providerType = null;

    // Act
    thrown.expect(NullPointerException.class);
    try {
      Class<?> c = Reflector.forName("com.google.auto.service.processor.AutoServiceProcessor");
      Method m = c.getDeclaredMethod("checkImplementer",
                                     Reflector.forName("javax.lang.model.element.TypeElement"),
                                     Reflector.forName("javax.lang.model.element.TypeElement"));
      m.setAccessible(true);
      m.invoke(objectUnderTest, providerImplementer, providerType);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
