package com.google.auto.factory.processor;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashSet;

public class FactoryDescriptor_UniqueNameSetTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: FactoryDescriptor */
  /*
   * Test generated by Diffblue Deeptest.This test covers `String
   * getUniqueName(CharSequence)' block 2 (line 67)
   * This test covers `String getUniqueName(CharSequence)' block 3 (line 67)
   * This test covers `String getUniqueName(CharSequence)' block 4 (line 68)
   * This test covers `String getUniqueName(CharSequence)' block 5 (line 68)
   * This test covers `String getUniqueName(CharSequence)' block 6 (line 68)
   * This test covers `String getUniqueName(CharSequence)' block 7 (line 71)
   * This test covers `String getUniqueName(CharSequence)' block 17 (line 71)
   *
   */

  @Test
  public void getUniqueNameInputNotNullOutputNotNull()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    Object objectUnderTest =
        Reflector.getInstance("com.google.auto.factory.processor.FactoryDescriptor$UniqueNameSet");
    HashSet hashSet = new HashSet();
    Reflector.setField(objectUnderTest, "uniqueNames", hashSet);
    CharSequence base = "ppppppppppppppp";

    // Act
    Class<?> c =
        Reflector.forName("com.google.auto.factory.processor.FactoryDescriptor$UniqueNameSet");
    Method m = c.getDeclaredMethod("getUniqueName", Reflector.forName("java.lang.CharSequence"));
    m.setAccessible(true);
    String retval = (String)m.invoke(objectUnderTest, base);

    // Assert result
    Assert.assertEquals("ppppppppppppppp", retval);
  }
}
