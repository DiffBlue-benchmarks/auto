package com.google.auto.factory.processor;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class FactoryWriterTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: FactoryWriter */
  /*
   * Test generated by Diffblue Deeptest.This test covers `int
   * lastIndexOf(CharSequence)' block 2 (line 263)
   * This test covers `int lastIndexOf(CharSequence)' block 3 (line 263)
   * This test covers `int lastIndexOf(CharSequence)' block 4 (line 263)
   * This test covers `int lastIndexOf(CharSequence)' block 6 (line 264)
   * This test covers `int lastIndexOf(CharSequence)' block 7 (line 264)
   * This test covers `int lastIndexOf(CharSequence)' block 9 (line 265)
   *
   */

  @Test
  public void lastIndexOfInputNotNullNotNullOutputPositive()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    CharSequence charSequence = "!!!!!!!";
    char c = '!';

    // Act
    Class<?> c0 = Reflector.forName("com.google.auto.factory.processor.FactoryWriter");
    Method m = c0.getDeclaredMethod("lastIndexOf", Reflector.forName("java.lang.CharSequence"),
                                    Reflector.forName("char"));
    m.setAccessible(true);
    int retval = (int)m.invoke(null, charSequence, c);

    // Assert result
    Assert.assertEquals(6, retval);
  }
}
