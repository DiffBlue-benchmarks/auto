package com.google.auto.factory.processor;

import com.diffblue.deeptestutils.Reflector;
import com.google.auto.factory.processor.ProvidedChecker;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Messager;

public class ProvidedCheckerTestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: ProvidedChecker */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 71 branch to line 71
   *  - conditional line 71 branch to line 72
   *  - conditional line 72 branch to line 72
   */

  @Test
  public void raiseErrorInputNullNotNullOutputNullPointerException() throws Throwable {

    // Arrange
    ProvidedChecker objectUnderTest = ((ProvidedChecker)Reflector.getInstance(
        "com.google.auto.factory.processor.ProvidedChecker"));
    Messager messager = ((Messager)Reflector.getInstance("javax.annotation.processing.Messager"));
    Reflector.setField(objectUnderTest, "messager", messager);
    javax.lang.model.element.VariableElement providedParameter = null;
    String messageFormat = "";

    // Act
    thrown.expect(NullPointerException.class);
    try {
      Class<?> c = Reflector.forName("com.google.auto.factory.processor.ProvidedChecker");
      Method m = c.getDeclaredMethod("raiseError",
                                     Reflector.forName("javax.lang.model.element.VariableElement"),
                                     Reflector.forName("java.lang.String"));
      m.setAccessible(true);
      m.invoke(objectUnderTest, providedParameter, messageFormat);
    } catch (InvocationTargetException ex) {
      throw ex.getCause();
    }

    // Method is not expected to return due to exception thrown
  }
}
