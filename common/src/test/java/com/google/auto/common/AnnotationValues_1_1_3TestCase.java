package com.google.auto.common;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import javax.lang.model.type.TypeMirror;

public class AnnotationValues_1_1_3TestCase {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: AnnotationValues */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void defaultActionInputZeroNotNullOutputFalse2()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    Object objectUnderTest = Reflector.getInstance("com.google.auto.common.AnnotationValues$1$1$4");
    Reflector.setField(objectUnderTest, "this$1", null);
    Object ignored = 0;
    TypeMirror alsoIgnored =
        ((TypeMirror)Reflector.getInstance("javax.lang.model.type.TypeMirror"));

    // Act
    Class<?> c = Reflector.forName("com.google.auto.common.AnnotationValues$1$1$4");
    Method m = c.getDeclaredMethod("defaultAction", Reflector.forName("java.lang.Object"),
                                   Reflector.forName("javax.lang.model.type.TypeMirror"));
    m.setAccessible(true);
    Boolean retval = (Boolean)m.invoke(objectUnderTest, ignored, alsoIgnored);

    // Assert result
    Assert.assertEquals(new Boolean(false), retval);
  }

  /* testedClasses: AnnotationValues */
  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire method.
   */

  @Test
  public void defaultActionInputZero0OutputFalse()
      throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {

    // Arrange
    Object objectUnderTest = Reflector.getInstance("com.google.auto.common.AnnotationValues$1$1$3");
    Reflector.setField(objectUnderTest, "this$1", null);
    Object ignored = 0;
    ArrayList alsoIgnored = new ArrayList();

    // Act
    Class<?> c = Reflector.forName("com.google.auto.common.AnnotationValues$1$1$3");
    Method m = c.getDeclaredMethod("defaultAction", Reflector.forName("java.lang.Object"),
                                   Reflector.forName("java.util.List"));
    m.setAccessible(true);
    Boolean retval = (Boolean)m.invoke(objectUnderTest, ignored, alsoIgnored);

    // Assert result
    Assert.assertEquals(new Boolean(false), retval);
  }
}
